// Generated by sonos-docs, do not edit.

use rupnp::{Device, Service};
use rupnp::http::Uri;
use rupnp::ssdp::URN;use crate::sonos::gen::errors::Error;

/// Sonos GroupManagementService
///
/// Services related to groups
#[derive(Debug)]
pub struct GroupManagementService {
    service: Service,
    url: Uri,
}

impl GroupManagementService {
    /// Create a new GroupManagementService instance from an existing UPnP device.
    pub async fn from_device(device: Device) -> Option<Self> {
        let urn = "urn:schemas-upnp-org:service:GroupManagement:1".parse::<URN>().unwrap();
        if let Some(s) = device.find_service(&urn) {
            Some(Self{ service: s.clone(), url: device.url().clone() })
        } else {
            None
        }
    }

    /// AddMember
    ///
    /// Parameters:
    /// * `member_id`
    /// * `boot_seq`
    ///
    /// Outputs:
    /// * `current_transport_settings`
    /// * `current_uri`
    /// * `group_uuidjoined`
    /// * `reset_volume_after`
    /// * `volume_avtransport_uri`
    pub async fn add_member(
            &self,
            member_id: String,
            boot_seq: u32
        ) -> Result<AddMemberResult, Error> {
        // TODO: use xml helper
        let mut payload = String::new();
        payload.push_str(format!("<MemberID>{}</MemberID>", member_id).as_str());
        payload.push_str(format!("<BootSeq>{}</BootSeq>", boot_seq).as_str());
        let response = self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        // TODO: map parse errors
        Ok(AddMemberResult {
            current_transport_settings: response.get("CurrentTransportSettings").ok_or_else(|| Error::MissingField("CurrentTransportSettings".to_string()))?
                .parse().map_err(|_| Error::ParseError("CurrentTransportSettings".to_string()))?,
            current_uri: response.get("CurrentURI").ok_or_else(|| Error::MissingField("CurrentURI".to_string()))?
                .parse().map_err(|_| Error::ParseError("CurrentURI".to_string()))?,
            group_uuidjoined: response.get("GroupUUIDJoined").ok_or_else(|| Error::MissingField("GroupUUIDJoined".to_string()))?
                .parse().map_err(|_| Error::ParseError("GroupUUIDJoined".to_string()))?,
            reset_volume_after: response.get("ResetVolumeAfter").ok_or_else(|| Error::MissingField("ResetVolumeAfter".to_string()))?
                .parse().map_err(|_| Error::ParseError("ResetVolumeAfter".to_string()))?,
            volume_avtransport_uri: response.get("VolumeAVTransportURI").ok_or_else(|| Error::MissingField("VolumeAVTransportURI".to_string()))?
                .parse().map_err(|_| Error::ParseError("VolumeAVTransportURI".to_string()))?,
        })
    }

    /// RemoveMember
    ///
    /// Parameters:
    /// * `member_id`
    pub async fn remove_member(
            &self,
            member_id: String
        ) -> Result<(), Error> {
        // TODO: use xml helper
        let mut payload = String::new();
        payload.push_str(format!("<MemberID>{}</MemberID>", member_id).as_str());
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// ReportTrackBufferingResult
    ///
    /// Parameters:
    /// * `member_id`
    /// * `result_code`
    pub async fn report_track_buffering_result(
            &self,
            member_id: String,
            result_code: i32
        ) -> Result<(), Error> {
        // TODO: use xml helper
        let mut payload = String::new();
        payload.push_str(format!("<MemberID>{}</MemberID>", member_id).as_str());
        payload.push_str(format!("<ResultCode>{}</ResultCode>", result_code).as_str());
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// SetSourceAreaIds
    ///
    /// Parameters:
    /// * `desired_source_area_ids`
    pub async fn set_source_area_ids(
            &self,
            desired_source_area_ids: String
        ) -> Result<(), Error> {
        // TODO: use xml helper
        let mut payload = String::new();
        payload.push_str(format!("<DesiredSourceAreaIds>{}</DesiredSourceAreaIds>", desired_source_area_ids).as_str());
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }
}

#[derive(Debug)]
pub struct AddMemberResult {
    pub current_transport_settings: String,
    pub current_uri: String,
    pub group_uuidjoined: String,
    pub reset_volume_after: bool,
    pub volume_avtransport_uri: String,
}

