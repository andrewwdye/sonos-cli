// Generated by sonos-docs, do not edit.

use rupnp::{Device, Service};
use rupnp::http::Uri;
use rupnp::ssdp::URN;use crate::sonos::gen::errors::Error;
use serde_xml_rs;

/// Sonos VirtualLineInService
///
#[derive(Debug)]
pub struct VirtualLineInService {
    service: Service,
    url: Uri,
}

impl VirtualLineInService {
    /// Create a new VirtualLineInService instance from an existing UPnP device.
    pub async fn from_device(device: Device) -> Option<Self> {
        let urn = "urn:schemas-upnp-org:service:VirtualLineIn:1".parse::<URN>().unwrap();
        if let Some(s) = device.find_service(&urn) {
            Some(Self{ service: s.clone(), url: device.url().clone() })
        } else {
            None
        }
    }

    /// Next
    ///
    /// Parameters:
    /// * `instance_id`
    pub async fn next(
            &self,
            instance_id: u32
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// Pause
    ///
    /// Parameters:
    /// * `instance_id`
    pub async fn pause(
            &self,
            instance_id: u32
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// Play
    ///
    /// Parameters:
    /// * `instance_id`
    /// * `speed`
    pub async fn play(
            &self,
            instance_id: u32,
            speed: String
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
            serde_xml_rs::to_string(&speed).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// Previous
    ///
    /// Parameters:
    /// * `instance_id`
    pub async fn previous(
            &self,
            instance_id: u32
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// SetVolume
    ///
    /// Parameters:
    /// * `instance_id`
    /// * `desired_volume`
    pub async fn set_volume(
            &self,
            instance_id: u32,
            desired_volume: u16
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
            serde_xml_rs::to_string(&desired_volume).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// StartTransmission
    ///
    /// Parameters:
    /// * `instance_id`
    /// * `coordinator_id`
    ///
    /// Outputs:
    /// * `current_transport_settings`
    pub async fn start_transmission(
            &self,
            instance_id: u32,
            coordinator_id: String
        ) -> Result<StartTransmissionResult, Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
            serde_xml_rs::to_string(&coordinator_id).unwrap(),
        ].concat();
        let response = self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        // TODO: map parse errors
        Ok(StartTransmissionResult {
            current_transport_settings: response.get("CurrentTransportSettings").ok_or_else(|| Error::MissingField("CurrentTransportSettings".to_string()))?
                .parse().map_err(|_| Error::ParseError("CurrentTransportSettings".to_string()))?,
        })
    }

    /// Stop
    ///
    /// Parameters:
    /// * `instance_id`
    pub async fn stop(
            &self,
            instance_id: u32
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }

    /// StopTransmission
    ///
    /// Parameters:
    /// * `instance_id`
    /// * `coordinator_id`
    pub async fn stop_transmission(
            &self,
            instance_id: u32,
            coordinator_id: String
        ) -> Result<(), Error> {
        let payload = [
            serde_xml_rs::to_string(&instance_id).unwrap(),
            serde_xml_rs::to_string(&coordinator_id).unwrap(),
        ].concat();
        self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        Ok(())
    }
}

#[derive(Debug)]
pub struct StartTransmissionResult {
    pub current_transport_settings: String,
}

