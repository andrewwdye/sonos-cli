// Generated by sonos-docs, do not edit.

use rupnp::{Device, Service};
use rupnp::http::Uri;
use serde_xml_rs;
use std::net::IpAddr;
use crate::sonos::gen::errors::Error;

/// Sonos QPlayService
///
/// Services related to Chinese Tencent Qplay service
#[derive(Debug)]
pub struct QPlayService {
    service: Service,
    url: Uri,
}

impl QPlayService {
    /// Create a new QPlayService instance from an existing UPnP device.
    pub async fn from_device(device: Device) -> Result<Self, Error> {
        let urn = "urn:schemas-tencent-com:service:QPlay:1".parse().unwrap();
        let service = device.find_service(&urn)
            .ok_or_else(|| Error::ServiceNotFound("QPlayService".to_string()))?;
        Ok(Self{ service: service.clone(), url: device.url().clone() })
    }

    /// Create a new QPlayService instance from an IP address.
    pub async fn from_ip(ip: IpAddr) -> Result<Self, Error> {
        let url = format!("http://{ip}:1400/xml/device_description.xml").parse().unwrap();
        let device = Device::from_url(url).await?;
        Self::from_device(device).await
    }

    /// QPlayAuth
    ///
    /// Parameters:
    /// * `seed`
    ///
    /// Outputs:
    /// * `code`
    /// * `mid`
    /// * `did`
    pub async fn q_play_auth(
            &self,
            seed: String
        ) -> Result<QPlayAuthResult, Error> {
        let payload = [
            serde_xml_rs::to_string(&seed).unwrap(),
        ].concat();
        let response = self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        // TODO: map parse errors
        Ok(QPlayAuthResult {
            code: response.get("Code").ok_or_else(|| Error::MissingField("Code".to_string()))?
                .parse().map_err(|_| Error::ParseError("Code".to_string()))?,
            mid: response.get("MID").ok_or_else(|| Error::MissingField("MID".to_string()))?
                .parse().map_err(|_| Error::ParseError("MID".to_string()))?,
            did: response.get("DID").ok_or_else(|| Error::MissingField("DID".to_string()))?
                .parse().map_err(|_| Error::ParseError("DID".to_string()))?,
        })
    }
}

#[derive(Debug)]
pub struct QPlayAuthResult {
    pub code: String,
    pub mid: String,
    pub did: String,
}
