// Generated by sonos-docs, do not edit.

use rupnp::{Device, Service};
use rupnp::http::Uri;
use rupnp::ssdp::URN;use crate::sonos::gen::errors::Error;
use serde_xml_rs;

/// Sonos QPlayService
///
/// Services related to Chinese Tencent Qplay service
#[derive(Debug)]
pub struct QPlayService {
    service: Service,
    url: Uri,
}

impl QPlayService {
    /// Create a new QPlayService instance from an existing UPnP device.
    pub async fn from_device(device: Device) -> Option<Self> {
        let urn = "urn:schemas-tencent-com:service:QPlay:1".parse::<URN>().unwrap();
        if let Some(s) = device.find_service(&urn) {
            Some(Self{ service: s.clone(), url: device.url().clone() })
        } else {
            None
        }
    }

    /// QPlayAuth
    ///
    /// Parameters:
    /// * `seed`
    ///
    /// Outputs:
    /// * `code`
    /// * `mid`
    /// * `did`
    pub async fn q_play_auth(
            &self,
            seed: String
        ) -> Result<QPlayAuthResult, Error> {
        let payload = [
            serde_xml_rs::to_string(&seed).unwrap(),
        ].concat();
        let response = self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        // TODO: map parse errors
        Ok(QPlayAuthResult {
            code: response.get("Code").ok_or_else(|| Error::MissingField("Code".to_string()))?
                .parse().map_err(|_| Error::ParseError("Code".to_string()))?,
            mid: response.get("MID").ok_or_else(|| Error::MissingField("MID".to_string()))?
                .parse().map_err(|_| Error::ParseError("MID".to_string()))?,
            did: response.get("DID").ok_or_else(|| Error::MissingField("DID".to_string()))?
                .parse().map_err(|_| Error::ParseError("DID".to_string()))?,
        })
    }
}

#[derive(Debug)]
pub struct QPlayAuthResult {
    pub code: String,
    pub mid: String,
    pub did: String,
}
