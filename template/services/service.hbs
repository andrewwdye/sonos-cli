// Generated by sonos-docs, do not edit.

use rupnp::{Device, Service};
use rupnp::http::Uri;
use serde_xml_rs;
use std::net::IpAddr;
use crate::sonos::gen::errors::Error;

/// Sonos {{serviceName}}
///
{{#if description}}
/// {{{description}}}
{{/if}}
#[derive(Debug)]
pub struct {{serviceName}} {
    service: Service,
    url: Uri,
}

impl {{serviceName}} {
    /// Create a new {{serviceName}} instance from an existing UPnP device.
    pub async fn from_device(device: Device) -> Result<Self, Error> {
        let urn = "{{serviceType}}".parse().unwrap();
        let service = device.find_service(&urn)
            .ok_or_else(|| Error::ServiceNotFound("{{serviceName}}".to_string()))?;
        Ok(Self{ service: service.clone(), url: device.url().clone() })
    }

    /// Create a new {{serviceName}} instance from an IP address.
    pub async fn from_ip(ip: IpAddr) -> Result<Self, Error> {
        let url = format!("http://{ip}:1400/xml/device_description.xml").parse().unwrap();
        let device = Device::from_url(url).await?;
        Self::from_device(device).await
    }

    {{#each actions}}
    /// {{name}}
    {{#if description}}
    ///
    /// {{{description}}}
    {{/if}}
    {{#if remarks}}
    ///
    /// Note: {{{remarks}}}
    {{/if}}
    {{#if inputs}}
    ///
    /// Parameters:
    {{#each inputs}}
    /// * `{{snake name}}`{{#if description}} : {{{description}}}{{/if}}
    {{/each}}
    {{/if}}
    {{#if outputs}}
    ///
    /// Outputs:
    {{#each outputs}}
    /// * `{{snake name}}`{{#if description}} : {{{description}}}{{/if}}
    {{/each}}
    {{/if}}
    pub async fn {{snake name}}(
            &self,
            {{#each inputs}}
            {{#if (are_equal name 'Type')}}type_t{{else}}{{snake name}}{{/if}}: {{relatedStateVariable.dataType}}{{#unless @last}},{{/unless}}
            {{/each}}
        ) -> Result<{{#if outputs}}{{name}}Result{{else}}(){{/if}}, Error> {
        {{#if inputs}}
        let payload = [
            {{#each inputs}}
            serde_xml_rs::to_string(&{{#if (are_equal name 'Type')}}type_t{{else}}{{snake name}}{{/if}}).unwrap(),
            {{/each}}
        ].concat();
        {{else}}
        let payload = String::new();
        {{/if}}
        {{#if outputs}}let response = {{/if}}self.service.action(&self.url, "SetTimeNow", payload.as_str()).await?;
        {{#if outputs}}
        // TODO: map parse errors
        Ok({{name}}Result {
            {{#each outputs}}
            {{snake name}}: response.get("{{name}}").ok_or_else(|| Error::MissingField("{{name}}".to_string()))?
                .parse().map_err(|_| Error::ParseError("{{name}}".to_string()))?,
            {{/each}}
        })
        {{else}}
        Ok(())
        {{/if}}
    }
    {{#unless @last}}

    {{/unless}}
    {{/each}}
}

{{#each actions}}
{{#if outputs}}
#[derive(Debug)]
pub struct {{name}}Result {
    {{#each outputs}}
    {{#if description}}
    /// {{{description}}}
    {{/if}}
    pub {{snake name}}: {{relatedStateVariable.dataType}},
    {{/each}}
}
{{#unless @last}}

{{/unless}}
{{/if}}
{{/each}}
